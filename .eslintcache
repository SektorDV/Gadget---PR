[{"D:\\Projekty\\Statystyki\\staty\\src\\App.js":"1","D:\\Projekty\\Statystyki\\staty\\src\\components\\Dashboards\\Main.js":"2","D:\\Projekty\\Statystyki\\staty\\src\\utils\\API.js":"3","D:\\Projekty\\Statystyki\\staty\\src\\components\\Inbox\\Main.js":"4","D:\\Projekty\\Statystyki\\staty\\src\\components\\Nav.js":"5","D:\\Projekty\\Statystyki\\staty\\src\\components\\Home\\Main.js":"6","D:\\Projekty\\Statystyki\\staty\\src\\components\\Dashboards\\Machine.js":"7","D:\\Projekty\\Statystyki\\staty\\src\\components\\Header.js":"8","D:\\Projekty\\Statystyki\\staty\\src\\utils\\data.js":"9","D:\\Projekty\\Statystyki\\staty\\src\\reportWebVitals.js":"10","D:\\Projekty\\Statystyki\\staty\\src\\components\\Invoices\\Main.js":"11","D:\\Projekty\\Statystyki\\staty\\src\\index.js":"12"},{"size":1175,"mtime":1606498403957,"results":"13","hashOfConfig":"14"},{"size":1272,"mtime":1606816309779,"results":"15","hashOfConfig":"14"},{"size":537,"mtime":1606485985620,"results":"16","hashOfConfig":"14"},{"size":127,"mtime":1606405075921,"results":"17","hashOfConfig":"14"},{"size":3401,"mtime":1606818892942,"results":"18","hashOfConfig":"14"},{"size":124,"mtime":1606405070817,"results":"19","hashOfConfig":"14"},{"size":5208,"mtime":1606731777255,"results":"20","hashOfConfig":"14"},{"size":379,"mtime":1606731896746,"results":"21","hashOfConfig":"14"},{"size":19518,"mtime":1606497122580,"results":"22","hashOfConfig":"14"},{"size":362,"mtime":1606395331859,"results":"23","hashOfConfig":"14"},{"size":136,"mtime":1606405081701,"results":"24","hashOfConfig":"14"},{"size":594,"mtime":1606474232074,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r0q45s",{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"D:\\Projekty\\Statystyki\\staty\\src\\App.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\components\\Dashboards\\Main.js",["52","53","54","55","56"],"D:\\Projekty\\Statystyki\\staty\\src\\utils\\API.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\components\\Inbox\\Main.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\components\\Nav.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\components\\Home\\Main.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\components\\Dashboards\\Machine.js",["57","58"],"import React, { useState, useEffect } from \"react\";\r\n// import { API } from \"../../utils/API\";\r\nimport { machines } from \"../../utils/data\";\r\nimport { useParams } from \"react-router-dom\";\r\n// import { SIGNALR_URL } from \"../../config\";\r\n// import { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\n\r\nconst Machine = () => {\r\n    // const [services, setServices] = useState();\r\n    // const [isButtonActive, setButtonActive] = useState(false);\r\n    // const [hubConnection, setHubConnection] = useState(null);\r\n    const [connectionState, setConnectionState] = useState(\"\");\r\n    const { machineId } = useParams();\r\n\r\n    // useEffect(() => {\r\n    //     API.fetchServicesList({ machineId }).then((response) =>\r\n    //         setServices(response.data)\r\n    //     );\r\n    // }, [machineId]);\r\n\r\n    // useEffect(() => {\r\n    //     const connection = new HubConnectionBuilder()\r\n    //         .withUrl(SIGNALR_URL)\r\n    //         .configureLogging(LogLevel.Critical)\r\n    //         .withAutomaticReconnect()\r\n    //         .build();\r\n\r\n    //     setHubConnection(connection);\r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     if (hubConnection !== null && machines) {\r\n    //         hubConnection.on(\"ServiceStatusChanged\", (response) => {\r\n    //             updateService(response.name, response.status);\r\n    //         });\r\n    //         hubConnection.onclose(() => {\r\n    //             setConnectionState(\"Disconnected\");\r\n    //         });\r\n    //         hubConnection.onreconnecting(() => {\r\n    //             setConnectionState(\"Reconnecting\");\r\n    //         });\r\n    //         hubConnection.onreconnected(() => {\r\n    //             setConnectionState(\"Reconnected\");\r\n    //         });\r\n    //         const start = async () => {\r\n    //             if (hubConnection.state === \"Disconnected\")\r\n    //                 try {\r\n    //                     await hubConnection.start();\r\n    //                 } catch (err) {\r\n    //                     console.log(err);\r\n    //                     setTimeout(() => start(), 5000);\r\n    //                 }\r\n    //         };\r\n\r\n    //         start().then(() => {\r\n    //             hubConnection.invoke(\"RegisterDashboard\", {});\r\n    //             setConnectionState(\"Connected\");\r\n    //         });\r\n    //     }\r\n    // }, [hubConnection, machines]);\r\n\r\n    // useEffect(() => {\r\n    //   const stateInterval = setInterval(() => {\r\n    //     if (hubConnection && hubConnection.state)\r\n    //       setConnectionState(hubConnection.state);\r\n    //   }, 100);\r\n    //   return () => clearInterval(stateInterval);\r\n    // });\r\n\r\n    // const updateService = (name, status) => {\r\n    //     const buffer = machines;\r\n    //     const serviceIndex = buffer.findIndex((service) => service.name === name);\r\n    //     buffer[serviceIndex] = { name, status };\r\n    //     // setServices([...buffer]);\r\n    // };\r\n\r\n    // const startService = (ServiceName) => {\r\n    //     if (hubConnection !== null && hubConnection.state === \"Connected\") {\r\n    //         hubConnection.invoke(\"StartService\", {\r\n    //             AgentId: machineId,\r\n    //             ServiceName,\r\n    //         });\r\n    //     }\r\n    // };\r\n\r\n    // const stopService = (ServiceName) => {\r\n    //     if (hubConnection !== null && hubConnection.state === \"Connected\") {\r\n    //         hubConnection.invoke(\"StopService\", {\r\n    //             AgentId: machineId,\r\n    //             ServiceName,\r\n    //         });\r\n    //     }\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <div>{machineId}</div>\r\n            <div>\r\n                {machines &&\r\n                    machines.map((service, index) => {\r\n                        return (\r\n                            <div key={service.name + index}>\r\n                                <div>{service.name}</div>\r\n                                <div status={service.status}>\r\n                                    {service.status}\r\n                                </div>\r\n                                {service.status === \"Running\" ? (\r\n                                    <div\r\n                                        disabled={connectionState !== \"Connected\"}\r\n                                    // onClick={() => stopService(service.name)}\r\n                                    >\r\n                                        {connectionState === \"Connected\" ? \"Stop\" : connectionState}\r\n                                    </div>\r\n                                ) : (\r\n                                        <div\r\n                                            disabled={connectionState !== \"Connected\"}\r\n                                        // onClick={() => startService(service.name)}\r\n                                        >\r\n                                            {connectionState === \"Connected\"\r\n                                                ? \"Start\"\r\n                                                : connectionState}\r\n                                        </div>\r\n                                    )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Machine;\r\n",["59","60"],"D:\\Projekty\\Statystyki\\staty\\src\\components\\Header.js",["61"],"D:\\Projekty\\Statystyki\\staty\\src\\utils\\data.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\reportWebVitals.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\components\\Invoices\\Main.js",[],"D:\\Projekty\\Statystyki\\staty\\src\\index.js",[],{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"62","severity":1,"message":"66","line":1,"column":27,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"67","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":13},{"ruleId":"62","severity":1,"message":"68","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":14},{"ruleId":"62","severity":1,"message":"69","line":4,"column":8,"nodeType":"64","messageId":"65","endLine":4,"endColumn":15},{"ruleId":"62","severity":1,"message":"66","line":1,"column":27,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"70","line":12,"column":29,"nodeType":"64","messageId":"65","endLine":12,"endColumn":47},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":7,"column":17,"nodeType":"77","endLine":7,"endColumn":49},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'API' is defined but never used.","'Link' is defined but never used.","'Machine' is defined but never used.","'setConnectionState' is assigned a value but never used.","no-native-reassign",["78"],"no-negated-in-lhs",["79"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]